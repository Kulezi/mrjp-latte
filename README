## Uruchamianie
Wymagane jest go 1.19.
Aby skompilować rozwiązanie należy użyć polecenia `make`, rezulatem powinien być
plik wykonywalny latc_x86_64.

`./latc_x86_64 <program.lat>` wykona analizę semantyczną podanego pliku,  
jeśli jest poprawny wypisze w pierwszej linii standardowego wyjścia błędu:  
`OK`  
wpp. wypisze w niej  
`ERROR`  
i w następnych liniach adekwatny komunikat pozwalający na zlokalizowanie błędu.

## Co robi ten kompilator:
* Generuje kod czwórkowy i kod assemblera x86_64 i kompiluje go przy użyciu gcc.
* Wszystkie wyrażenia są obliczane przy pomocy stosu.
* Przekazywanie argumentów realizowane jest przy pomocy stosu, (oprócz funkcji z runtime)
* Wszystkie reprezentacje zmiennych danego typu są 64-bitowe.
* Nie wykonuje obecnie żadnych optymalizacji ani alokacji rejestrów.

## Struktura katalogów
.
├── Makefile
├── README
└── src
    ├── compiler
    │   ├── build.go - funkcje mające zbudować binarkę x86_64 (nieużywane, na przyszłość)
    │   ├── compiler.go 
    │   ├── compiler_test.go
    │   ├── frontend
    │   │   ├── errors.go
    │   │   ├── frontend.go
    │   │   ├── inheritance.go - obsługuje dziedziczenie metod w klasach.
    │   │   ├── syntax_error_listener.go - listener wyłapujący błędy parsera/leksera
    │   │   ├── top_def_visitor.go - rozwiązywanie nazw globalnych
    │   │   ├── type_check_visitor.go - tu dzieje się większość analizy semantycznej z użyciem visitor pattern
    │   │   └── types.go - deklaracje typów dostępnych w języku Latte
    │   └── gen.go
    │   ├── backend
    │   │   ├── gen.go - generacja kodu GAS z kodu pośredniego
    │   │   ├── liveness.go - w przyszłości tu będzie implementacja wyliczania zmiennych żywych.
    │   │   ├── ssa.go - w przyszłości tu będzie implementacja konwersji do SSA.
    │   │   └── ir
    │   │       ├── cfg.go - reprezentacja grafu kontrolic przepływu
    │   │       ├── ir.go - reprezentacja kodu pośredniego "czwórkowego"
    │   │       └── visitor.go, expr.go, i reszta to implementacja visitora generującego kod pośredni
    │   └── gen.go
    ├── go.mod
    ├── go.sum
    ├── Latte.g4 - opis gramatyki języka Latte z rozszerzeniami dla ANTLRv4
    ├── cmd - tu są main.go z których generuje się binarki latc i latc_x86_64
    └── parser/ - parser wygenerowany automatycznie przy użyciu ANTLRv4




## Rozszerzenie: tablice jednowymiarowe.
* Tablice można stworzyć używając `new T[rozmiar]`
* Można iterować się po elementach tablicy `T[] arr` przy użyciu `for (T x : arr)`
##  Rozszerzenie: obiekty z metodami wirtualnymi.
* Klasy mogą dziedziczyć po maksymalnie jednej klasie.
* Przy dziedziczeniu metody nadklasy są nadpisywane przez metody podklasy,
    po zrzutowaniu w górę nadal obowiązuje metoda podklasy.
* Zmienne nadklasy nie są widoczne w podklasie, widać je dopiero po zrzutowaniu podklasy w górę.
* Zmienna typu obiektu to referencja do obiektu zaalokowanego na stercie,
    może ona przyjąć wartość `null`.
* Null jest silnie typowany, tzn. nie można napisać `A x = null`, 
    zawsze trzeba napisać `A x = (A)null`;
* Można uzyskać referencję na obecną klasę używając `self`.
* Obiekt typu `c` można stworzyć używając `new c`

## Plan na 29.11.2022:

* (+4) Frontend:
    * Parsowanie przy użyciu ANTLR w Go.
    * Analiza semantyczna łącznie z wymienionymi wyżej rozszerzeniami
        * Type check
        * Return check

## Plan na 15.01.2023:
* (+10) Backend:
    * Generator kodu x86_64 (NASM)

## Plan na 30.01.2023:

* (+11) Bazowe Latte plus następujące rozszerzenia:
    * (+1) Tablice jednowymiarowe
    * (+10) Obiekty
        * (+2) Pola i metody
        * (+4) Metody wirtualne 
        * (+4) Dziedziczenie (bez wielodziedziczenia) z nadpisywaniem metod wirtualnych

* (+5) Optymalizacje:
    * (+5) Wykorzystanie rejestrów



Łącznie: 4 + 10 - 2 + 11 + 5 - 2 = 26
